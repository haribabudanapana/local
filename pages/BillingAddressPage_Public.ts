import { Page, Locator } from '@playwright/test';

export class BillingAddressPage_Public {
	page: Page;
  addressValidationPopupContinueBtn: Locator;
  firstNameTextbox: Locator;
  lastNameTextbox: Locator;
  middleNameTextbox: Locator;
  companyTextbox: Locator;
  companytextbox: Locator;
  companyAffiliationCheckbox: Locator;
  companyAffiliation: Locator;
  companyAffiliationText: Locator;
  billingAddress1Textbox: Locator;
  billingAddress2Textbox: Locator;
  billingAddress3Textbox: Locator;
  cartButton: Locator;
  spinner: Locator;
  ContinueBtn: Locator;
  cannotShipBAText: Locator;
  clickHereBALink: Locator;
  clickHerePopup: Locator;
  cityTextbox: Locator;
  stateTextbox: Locator;
  stateDropdown: Locator;
  stateDropdown2: Locator;
  postalCodeTextbox: Locator;
  countryDropdown: Locator;
  phoneTextbox: Locator;
  phoneMessage: Locator;
  emailTextbox: Locator;
  emailMessage: Locator;
  SAMessage: Locator;
  SAMessageCheckbox: Locator;
  errorMessageForStateRequired: Locator;
  countrySanctionedErrorMessage: Locator;
  countrySanctionedMessageCloseButton: Locator;
  errorMessageList: Locator;
  billingAddressHeader: Locator;
  billingAddressContinueButton: Locator;
  UseSelectedAddress: Locator;
  loader: Locator;
  textBoxListElement: Locator;
  textBoxListExceptStateByRegion: Locator;
  getShippingOptionsListElement: Locator;
  getShipToSameAddressAndSameContactPersonOption: Locator;
  getShipToSameAddressAndDifferentContactPersonOption: Locator;
  getShipToDifferentAddressOption: Locator;
  firstNameLabel: Locator;
  middleNameLabel: Locator;
  lastNameLabel: Locator;
  lastNameVeribage: Locator;
  orgCompanyLabel: Locator;
  streetLabel: Locator;
  streetVeribage: Locator;
  streetVeribageAPI: Locator;
  cityLabel: Locator;
  stateLabel: Locator;
  postCodeLabel: Locator;
  countryLabel: Locator;
  phoneLabel: Locator;
  phoneVeribage: Locator;
  emailLabel: Locator;
  emailVeribage: Locator;
  emailErrorMessage: Locator;
  checkboxVeribage: Locator;
  warningMessages: Locator;
  warningMessagesList: Locator;
  warningMessageVisible: Locator;
  billingAddressAlert: Locator;
  allBillingAddressFields: Locator;
  billingCountryAndState: Locator;
  billingNotSameAsShippingRadioButton: Locator;
  shippingDetailsTextBoxes: Locator;
  shippingDetailDropDown: Locator;
  noChangeBtn: Locator;
  continueBtn: Locator;
  AddressValidationHeader: Locator;
  AddressValContinueBtn: Locator;
  HazardousWarningText: Locator;
  useSelectedAddressBTN: Locator;
  AddmodelBoxText: Locator;
  useSelAddressTitleMagento: Locator;
  AddressEnteredRadio: Locator;
  UseSelAddText: Locator;
  confirmAddressValidation: Locator;
  wrongAddressValidation: Locator;
  useSelAddressTitle: Locator;

  constructor(page: Page) {
    this.page = page;
    this.addressValidationPopupContinueBtn = page.locator("//button[contains(@class,'action-accept')]/span[text()='Continue']");
    this.firstNameTextbox = page.locator("div[name='billingAddress.firstname'] input");
    this.lastNameTextbox = page.locator("div[name='billingAddress.lastname'] input");
    this.middleNameTextbox = page.locator("div[name='billingAddress.middlename'] input");
    this.companyTextbox = page.locator("div[name='billingAddress.company'] input");
    this.companytextbox = page.locator("div[name='billingAddress.company']");
    this.companyAffiliationCheckbox = page.locator("div[class='field company_affiliation'] input");
    this.companyAffiliation = page.locator("//label[@class='admin__field-label custom-control-label']");
    this.companyAffiliationText = page.locator("div[class='field company_affiliation'] label[class*='field-label']");
    this.billingAddress1Textbox = page.locator("div[name='billingAddress.street.0'] input");
    this.billingAddress2Textbox = page.locator("div[name='billingAddress.street.1'] input");
    this.billingAddress3Textbox = page.locator("div[name*='billingAddress.street.2'] input");
    this.cartButton = page.locator("//span[text()='Cart']");
    this.spinner = page.locator(".spinner-border");
    this.ContinueBtn = page.locator("//button[contains(@class,'action-accept')]");
    this.cannotShipBAText = page.locator("//div[@name='billingAddress.street.0']//span[contains(text(),'ASTM cannot')]");
    this.clickHereBALink = page.locator("//div[@name='billingAddress.street.0']//a[contains(text(),'Click')]");
    this.clickHerePopup = page.locator("//h5[text()='Shipping to PO Box addresses']");
    this.cityTextbox = page.locator("div[name='billingAddress.city'] input");
    this.stateTextbox = page.locator("div[name='billingAddress.region'] input");
    this.stateDropdown = page.locator("div[name='billingAddress.region_id'] select");
    this.stateDropdown2 = page.locator("div[name='billingAddress.region_id']");
    this.postalCodeTextbox = page.locator("div[name*='billingAddress.postcode'] input");
    this.countryDropdown = page.locator("//div[@name='billingAddress.country_id']//select");
    this.phoneTextbox = page.locator("[name='telephone']");
    this.phoneMessage = page.locator("//div[@name='billingAddress.telephone']//span[contains(text(),'Please do not')]");
    this.emailTextbox = page.locator("*[name='billingAddress.email'] *[name='email']");
    this.emailMessage = page.locator("//span[text()='Required for Order Confirmation and Support']");
    this.SAMessage = page.locator("//span[text()='Shipping address is the same as billing address']");
    this.SAMessageCheckbox = page.locator("//input[@type='checkbox' and @name='shipping-address-same-as-billing']");
    this.errorMessageForStateRequired = page.locator("//*[@name='billingAddress.region_id']//*[text()='This is a required field.']");
    this.countrySanctionedErrorMessage = page.locator("//div[@class='alert astm-alert bg-danger--light']/div");
    this.countrySanctionedMessageCloseButton = page.locator("//div[@class='alert astm-alert bg-danger--light']/button");
    this.errorMessageList = page.locator(".field-error");
    this.billingAddressHeader = page.locator("//h2[text()='Billing Address']");
    this.billingAddressContinueButton = page.locator("(//button[@class='continue primary btn astm-btn btn-primary']/span[text()='Continue'])[1]");
    this.UseSelectedAddress = page.locator("//span[text()='Use Selected Address']");
    this.loader = page.locator("#checkout-loader");
    this.textBoxListElement = page.locator("div[name*='billingAddress'] input");
    this.textBoxListExceptStateByRegion = page.locator("//div[contains(@name,'billingAddress')]//input[@name!='region']");
    this.getShippingOptionsListElement = page.locator(".ptp-shipping-address-group label");
    this.getShipToSameAddressAndSameContactPersonOption = page.locator("//*[text()='Ship to same address and same contact person']");
    this.getShipToSameAddressAndDifferentContactPersonOption = page.locator("//*[text()='Ship to same address and different contact person ']");
    this.getShipToDifferentAddressOption = page.locator("//*[text()='Ship to different address']");
    this.firstNameLabel = page.locator("//div[@name='billingAddress.firstname']//span");
    this.middleNameLabel = page.locator("//div[@name='billingAddress.middlename']//span");
    this.lastNameLabel = page.locator("//div[@name='billingAddress.lastname']//span");
    this.lastNameVeribage = page.locator("//div[@name='billingAddress.lastname']//span[contains(text(),'customer contact')]");
    this.orgCompanyLabel = page.locator("//div[@name='billingAddress.company']//span");
    this.streetLabel = page.locator("//fieldset[@id='billing-new-address-form']/fieldset/legend/span");
    this.streetVeribage = page.locator("//div[@name='billingAddress.street.0']//span[contains(text(),'ASTM cannot')]");
    this.streetVeribageAPI = page.locator("//div[@name='billingAddress.street.0']//span[contains(text(),'API cannot')]");
    this.cityLabel = page.locator("//div[@name='billingAddress.city']//span");
    this.stateLabel = page.locator("//div[@name='billingAddress.region']//span");
    this.postCodeLabel = page.locator("//div[@name='billingAddress.postcode']//span");
    this.countryLabel = page.locator("//div[@name='billingAddress.country_id']//span");
    this.phoneLabel = page.locator("//div[@name='billingAddress.telephone']//span[text()='Phone']");
    this.phoneVeribage = page.locator("//div[@name='billingAddress.telephone']//span[contains(text(),'country code')]");
    this.emailLabel = page.locator("//div[@name='billingAddress.email']//span[text()='Email']");
    this.emailVeribage = page.locator("//div[@name='billingAddress.email']//span[contains(text(),'Required for Order')]");
    this.emailErrorMessage = page.locator("//div[@name='billingAddress.email']//span[contains(text(),'Please enter a valid email address (Ex: johndoe@domain.com).')]");
    this.checkboxVeribage = page.locator("//div[@name='billingAddress.company']//following::label[contains(text(),'Check here')]");
    this.warningMessages = page.locator("//*[@class='astm-alert-text' and contains(text(),'United States Department of Treasury')]");
    this.warningMessagesList = page.locator(".astm-alert-text");
    this.warningMessageVisible = page.locator("//*[@class='astm-alert-text']/ancestor::div[contains(@data-bind,'visible:')]");
    this.billingAddressAlert = page.locator("//span[@class='astm-alert-text'][contains(text(),'One or more')]");
    this.allBillingAddressFields = page.locator("//div[@class='billing-address-step']//div[not(contains(@style,'none'))]/div[@class='control']/input[@type='text']");
    this.billingCountryAndState = page.locator("//div[@class='billing-address-step']//div[not(contains(@style,'none'))]/div[@class='control']/select");
    this.billingNotSameAsShippingRadioButton = page.locator("//*[@id='checkout-step-shipping']/div[1]/div[2]/label/span");
    this.shippingDetailsTextBoxes = page.locator("//div[@class='shipping-address-step']//div[not(contains(@style,'none'))]/div[@class='control']/input[@type='text']");
    this.shippingDetailDropDown = page.locator("//div[@class='shipping-address-step']//div[not(contains(@style,'none'))]/div[@class='control']/select");
    this.noChangeBtn = page.locator("//button[contains(@data-bind,'cancelChangesBilling')]");
    this.continueBtn = page.locator("//button[contains(@data-bind,'saveBillingAddress')]");
    this.AddressValidationHeader = page.locator("//header[@class='modal-header']/h1[contains(text(),'Address Validation')]");
    this.AddressValContinueBtn = page.locator("//button[@class='btn astm-btn btn-secondary action-accept']/span[text()='Continue']");
    this.HazardousWarningText = page.locator("//span[contains(text(),'One or more of the products in your cart contains a hazardous material')]");
    this.useSelectedAddressBTN = page.locator("//span[contains(text(),'Use Selected Address')]/parent::button");
    this.AddmodelBoxText = page.locator("//div[contains(text(),'We can not')]");
    this.useSelAddressTitleMagento = page.locator("(//h1[@class='modal-title'])[4]");
    this.AddressEnteredRadio = page.locator("//input[@id='entered']");
    this.UseSelAddText = page.locator("//div[contains(text(),'We have slightly modified')]");
    this.confirmAddressValidation = page.locator("//div[@class='address-modal-description']");
    this.wrongAddressValidation = page.locator("//div[contains(text(),'Do you want to proceed')]/..");
    this.useSelAddressTitle = page.locator("//div[contains(text(),'We can not')]/parent::div/parent::div/descendant::h1");

      
  }

}