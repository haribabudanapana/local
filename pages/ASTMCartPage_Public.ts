
import { Page, Locator } from '@playwright/test';

export class CartPage_Public {


readonly emptyCartMessageHeader: Locator;
readonly cartTable: Locator;
readonly cartItems: Locator;
readonly qty: Locator;
readonly qtyOfItem: Locator;
readonly subTotalprice: Locator;
readonly itemName: Locator;
readonly descriptionHeader: Locator;
readonly price: Locator;
readonly updateQty: Locator;
readonly updateQtyBtn: Locator;
readonly quanityOnCartPage: Locator;
readonly quantityofItem: Locator;
readonly rushShippingCloseButton: Locator;
readonly msg_rushshippinh: Locator;
readonly rushShippingContactBtn: Locator;
readonly rushShippingText: Locator;
readonly rushShippingmessage: Locator;
readonly rushShippingCustomerService: Locator;
readonly orgAdminRoleForB2bmessage: Locator;
readonly orgAdminRoleForB2bmessage1: Locator;
readonly wrongAccountErrorMessage: Locator;
readonly existingPTPCustomerErrorMessage: Locator;
readonly selectADifferentAccountLink: Locator;
readonly memberDiscount: Locator;
readonly subTotalPrice: Locator;
readonly subTotalPrice1: Locator;
readonly discountPrice: Locator;
readonly memberDiscountonCart: Locator;
readonly membershipDiscount: Locator;
readonly error_Message: Locator;
readonly productsDifferenceError: Locator;
readonly differentTypeError: Locator;
readonly conflictProductError: Locator;
readonly cartItemList: Locator;
readonly firstItemDescription: Locator;
readonly emptyPageHeader: Locator;
readonly emptyPageHeader2: Locator;
readonly restoreLink: Locator;
readonly purchaseStandardLink: Locator;
readonly joinASTMLink: Locator;
readonly continueShoppingLink: Locator;
readonly restoreErrorMessage: Locator;
readonly deleteOption: Locator;
readonly emptyCartMessage: Locator;
readonly cartPageIdentifier: Locator;
readonly OKButton: Locator;
readonly DeleteBtn: Locator;
readonly cartIndicator: Locator;
readonly productInfo: Locator;
readonly switchAccounts: Locator;
readonly switchaccountIndicator: Locator;
readonly accountCreationPopup: Locator;
readonly b2bOrgAdminAlert: Locator;

    constructor(page: Page) {
    this.emptyCartMessageHeader = page.locator("//b[text()='Your cart is empty']");
    this.cartTable = page.locator("#shopping-cart-table");
    this.cartItems = page.locator("//*[@class='item-info ']");
    this.qty = page.locator("input[id*='cart'][title='Qty']");
    this.qtyOfItem = page.locator("//input[@title='Qty']");
    this.subTotalprice = page.locator("//tbody//tr//td[@data-th='Subtotal']");
    this.itemName = page.locator("//*[@class='product-item-name']");
    this.descriptionHeader = page.locator("//th//span[text()='Description']");
    this.price = page.locator("//td[@data-th='Price']//span[@class='cart-price']//span");
    this.updateQty = page.locator("//button[@name='update_cart_action']");
    this.updateQtyBtn = page.locator("//button[@title='Update Qty.']");
    this.quanityOnCartPage = page.locator("//input[@title='Qty']");
    this.quantityofItem = page.locator("(//*[@class='item-info'])[1]//*[@class='col qty']//input[@title='Qty']");
    this.rushShippingCloseButton = page.locator("//div[@id='rush-shipping-popup']//button[@class='close']//span");
    this.msg_rushshippinh = page.locator("//span[contains(text(),'Need rush shipping')]");
    this.rushShippingContactBtn = page.locator("//a[contains(@class,'contact-link')]");
    this.rushShippingText = page.locator("//*[contains(text(),'Need rush shipping? Please')]");
    this.rushShippingmessage = page.locator("//span[contains(text(),'Need rush shipping')]");
    this.rushShippingCustomerService = page.locator("//a[contains(text(),'contact customer service')]");
    this.orgAdminRoleForB2bmessage = page.locator("//div[@class='prepare-message astm-alert-text']");
    this.orgAdminRoleForB2bmessage1 = page.locator("(//div[@class='prepare-message astm-alert-text'])[2]");
    this.wrongAccountErrorMessage = page.locator("//*[contains(text(),'You are currently shopping as')]");
    this.existingPTPCustomerErrorMessage = page.locator("//*[contains(text(),'You are already a PTP customer.')]");
    this.selectADifferentAccountLink = page.locator("text=select a different account.");
    this.memberDiscount = page.locator("//strong[text()='Member Discount:']/../span/span");
    this.subTotalPrice = page.locator("//strong[text()='Member Discount:']/preceding-sibling::span/span");
    this.subTotalPrice1 = page.locator("//*[text()='Subtotal:']/../span/span[@class='price']");
    this.discountPrice = page.locator("//strong[text()='Member Discount:']/following-sibling::span/span");
    this.memberDiscountonCart = page.locator("//*[text()='Member Discount:']/following-sibling::td/span");
    this.membershipDiscount = page.locator("//*[text()='Member Discount:']");
    this.error_Message = page.locator("//*[text()='You should have an organization admin role to make a B2B product purchase']");
    this.productsDifferenceError = page.locator("//div[@data-ui-id='message-error']/div");
    this.differentTypeError = page.locator("//*[contains(text(),'We are sorry')]");
    this.conflictProductError = page.locator("//*[contains(text(),'We are sorry. This product conflicts with a product currently in your cart. To add this product, you must first clear your cart. Please ')]");
    this.cartItemList = page.locator("//td//div[@class='product-item-details']//a");
    this.firstItemDescription = page.locator("//tbody[@class='cart item'][1]//strong[@class='product-item-name']");
    this.emptyPageHeader = page.locator("//div[@class='cart-empty pl-2']//b");
    this.emptyPageHeader2 = page.locator("//h1[contains(text(),'Do you want to:')]");
    this.restoreLink = page.locator("//a[contains(text(),'Restore')]");
    this.purchaseStandardLink = page.locator("//a[contains(text(),'Purchase a standard or a standards')]");
    this.joinASTMLink = page.locator("//a[contains(text(),'Join ASTM')]");
    this.continueShoppingLink = page.locator("//a[contains(text(),'Continue Shopping')]");
    this.restoreErrorMessage = page.locator("//div[contains(text(),'nothing to restore')]");
    this.deleteOption = page.locator("*[title='delete']");
    this.emptyCartMessage = page.locator("//*[text()='Your cart is empty']");
    this.cartPageIdentifier = page.locator("div[class*='astm-type-body--lead'] div");
    this.OKButton = page.locator("//a[@class='btn astm-btn btn-secondary button-confirm']");
    this.DeleteBtn = page.locator("//a[@class='action action-delete']");
    this.cartIndicator = page.locator("//span[text()='Cart']//following::span[@class='counter-number']");
    this.productInfo = page.locator(".product-item-details");
    this.switchAccounts = page.locator("//a[contains(text(),'Switch Account')]");
    this.switchaccountIndicator = page.locator("//*[@class='warning-container']//span[contains(text(),'You are currently logged in as')]");
    this.accountCreationPopup = page.locator("//*[contains(text(),'You are currently signed')]");
    this.b2bOrgAdminAlert = page.locator("//div[@data-ui-id='checkout-cart-validationmessages-message-error']");
}

}
