
import { Page, Locator } from '@playwright/test';

export class PIMpage {

    readonly selectAnAccountHeader: Locator;
readonly chooseBallotClosingDate: Locator;
readonly createButton: Locator;
readonly selectButtonOwensCorning: Locator;
readonly owensCorningHeader: Locator;
readonly committeeGroupRadioButton: Locator;
readonly createNewGroupButton: Locator;
readonly createNewGroupHeader: Locator;
readonly selectCommitteeDropdown: Locator;
readonly groupNameTextbox: Locator;
readonly spbLoader: Locator;
readonly deleteGroup: Locator;
readonly deleteCollaborationArea: Locator;
readonly memberLinkForGroup: Locator;
readonly memberTabTable: Locator;
readonly groupAdministratorDropdown: Locator;
readonly groupDescriptionTextbox: Locator;
readonly additionalMembersTextbox: Locator;
readonly uploadDraftsNoRadioBtn: Locator;
readonly uploadOptionsSectionHeader: Locator;
readonly createGroupButton: Locator;
readonly additionalMembersHeader: Locator;
readonly uploadSupportNo: Locator;
readonly accountLink: Locator;
readonly buttonSignOut: Locator;
readonly tokenExpiredHeader: Locator;
readonly cookieCloseButton: Locator;
readonly memberAsTab: Locator;
readonly addOrRemoveMembersBtn: Locator;
readonly addMemberArrow: Locator;
readonly removeMemberArrow: Locator;
readonly selectMember: Locator;
readonly disSelectMember: Locator;
readonly manage: Locator;
readonly selectGroup_editGroup: Locator;
readonly selectGroup_replaceDraft: Locator;
readonly selectSubGroup_replaceDraft: Locator;
readonly uploadDrafts: Locator;
readonly uploadSupportDraft: Locator;
readonly replaceDraft: Locator;
readonly replaceDraftUpload: Locator;
readonly fileUpload: Locator;
readonly uploadedFileName: Locator;
readonly fileUploadErrorMessage: Locator;
readonly draftsList: Locator;
readonly viewDraft: Locator;
readonly draftTitle: Locator;
readonly deleteDraft: Locator;
readonly confirmDeleteDraft: Locator;
readonly draftVersion: Locator;
readonly viewDraftWindow: Locator;
readonly closeViewDraftWindow: Locator;
readonly editDraftButton: Locator;
readonly draftDescription: Locator;
readonly saveDraftButton: Locator;
readonly downloadDraft: Locator;
readonly draftUpdatedMessage: Locator;
readonly draftDetails: Locator;
readonly ballotTab: Locator;
readonly createBallotButton: Locator;
readonly createBallotHeader: Locator;
readonly ballotNameTextbox: Locator;
readonly ballotTypeDropdown: Locator;
readonly ballotOpenDate: Locator;
readonly ballotCloseDate: Locator;
readonly addBallotItemButton: Locator;
readonly ballotItemTitle: Locator;
readonly ballotItemDescription: Locator;
readonly ballotItemUpload: Locator;
readonly ballotItemList: Locator;
readonly removeBallotItem: Locator;
readonly saveBallotButton: Locator;
readonly ballotCreatedMessage: Locator;
readonly ballotList: Locator;
readonly viewBallot: Locator;
readonly closeBallotView: Locator;
readonly nextPage1: Locator;
readonly nextPage2: Locator;
readonly prevPage1: Locator;
readonly prevPage2: Locator;
readonly comment_discussions: Locator;
readonly collaborationAreaNo: Locator;
readonly collaborationAreaTitle: Locator;
readonly addCommentButton: Locator;
readonly commentTextArea: Locator;
readonly postCommentButton: Locator;
readonly postedComment: Locator;
readonly editCommentButton: Locator;
readonly deleteCommentButton: Locator;
readonly confirmDeleteComment: Locator;
readonly commentTimestamp: Locator;
readonly commentAuthor: Locator;
readonly discussionList: Locator;
readonly openDiscussion: Locator;
readonly closeDiscussion: Locator;
readonly discussionTitle: Locator;
readonly discussionDescription: Locator;
readonly addDiscussionButton: Locator;
readonly discussionTitleInput: Locator;
readonly discussionDescriptionInput: Locator;
readonly saveDiscussionButton: Locator;
readonly discussionCreatedMessage: Locator;
readonly replyButton: Locator;
readonly replyTextArea: Locator;
readonly postReplyButton: Locator;
readonly replyList: Locator;
readonly editReplyButton: Locator;
readonly deleteReplyButton: Locator;
readonly confirmDeleteReply: Locator;



    constructor(page: Page) {
        this.selectAnAccountHeader = page.locator("//*[text()='Select an Account']");
this.chooseBallotClosingDate = page.locator("//input[@id='rdp-form-control-closingDate']");
this.createButton = page.locator("//button[contains(text(),'Create New Group')]");
this.selectButtonOwensCorning = page.locator("//*[text()='Select']");
this.owensCorningHeader = page.locator("//*[@class='banner-wrapper']//*[text()='Owens Corning']");
this.committeeGroupRadioButton = page.locator("//input[@value='Committee Group']");
this.createNewGroupButton = page.locator("//button[text()='Create New Collaboration Area']|//button[text()='Create New Group']");
this.createNewGroupHeader = page.locator("//*[contains(text(),'Create New')]");
this.selectCommitteeDropdown = page.locator("//select[@aria-label='Select Value']");
this.groupNameTextbox = page.locator("[name='groupName']");
this.spbLoader = page.locator("//div[@class='astm-spinner spinner-border']");
this.deleteGroup = page.locator("//a[text()='Delete Group']");
this.deleteCollaborationArea = page.locator("//a[text()='Delete Collaboration Area']");
this.memberLinkForGroup = page.locator("text=Members");
this.memberTabTable = page.locator("//*[@class='spec-member-table-wrapper']");
this.groupAdministratorDropdown = page.locator("//label[starts-with(text(),'Collaboration Area')]//following-sibling::div//select |//label[starts-with(text(),'Group')]//following-sibling::div//select");
this.groupDescriptionTextbox = page.locator("*[name='description'][class='form-control']");
this.additionalMembersTextbox = page.locator("[name='additionalMembers']");
this.uploadDraftsNoRadioBtn = page.locator("//*[text()='No, just Collaboration Area Administrator']/preceding-sibling::input[@name='uploadAllCan']|//*[text()='No, just Group Administrator']/preceding-sibling::input[@name='uploadAllCan']");
this.uploadOptionsSectionHeader = page.locator("//*[text()='Upload Options']");
this.createGroupButton = page.locator("//button[contains(text(),'Create')]");
this.additionalMembersHeader = page.locator("//*[text()='Additional Members:']");
this.uploadSupportNo = page.locator("//input[@name='uploadAllSupportCan' and @value='No']");
this.accountLink = page.locator("text=Account");
this.buttonSignOut = page.locator("//button[contains(.,'Sign out')]");
this.tokenExpiredHeader = page.locator("//*[contains(text(), 'Token Expired')]");
this.cookieCloseButton = page.locator("//div[@class='alert freeze-msg astm-alert ']//button");
this.memberAsTab = page.locator("//a[text()='Members']");
this.addOrRemoveMembersBtn = page.locator("//a[text()='Add/Remove Members']");
this.addMemberArrow = page.locator("//button[@aria-label='Add member']");
this.removeMemberArrow = page.locator("//button[@aria-label='Remove Member']");
this.selectMember = page.locator("(//div[@class='select-wrapper'])[1]//option[1]");
this.disSelectMember = page.locator("(//div[@class='select-wrapper'])[2]//option[1]");
this.manage = page.locator("//button[text()='Manage']");
this.selectGroup_editGroup = page.locator("//select[@title='Select Group to Edit']");
this.selectGroup_replaceDraft = page.locator("//select[@title='Select a Group']");
this.selectSubGroup_replaceDraft = page.locator("//select[@title='Select Draft']");
this.uploadDrafts = page.locator("//button[text()='Upload Draft']");
this.uploadSupportDraft = page.locator("//input[@name='supportingDraft']");
this.replaceDraft = page.locator("//button[text()='Replace Draft']");
this.replaceDraftUpload = page.locator("//input[@type='file' and @name='replaceDraft']");
this.fileUpload = page.locator("//input[@type='file']");
this.uploadedFileName = page.locator("//span[@class='uploaded-file-name']");
this.fileUploadErrorMessage = page.locator("//div[contains(@class,'upload-error-msg')]");
this.draftsList = page.locator("//ul[@class='drafts-list']/li");
this.viewDraft = page.locator("//a[text()='View']");
this.draftTitle = page.locator("//h1[@class='draft-title']");
this.deleteDraft = page.locator("//button[text()='Delete Draft']");
this.confirmDeleteDraft = page.locator("//button[text()='Confirm']");
this.draftVersion = page.locator("//span[@class='draft-version']");
this.viewDraftWindow = page.locator("//div[@class='draft-viewer']");
this.closeViewDraftWindow = page.locator("//button[@aria-label='Close Draft']");
this.editDraftButton = page.locator("//button[text()='Edit Draft']");
this.draftDescription = page.locator("//textarea[@name='description']");
this.saveDraftButton = page.locator("//button[text()='Save Draft']");
this.downloadDraft = page.locator("//button[text()='Download Draft']");
this.draftUpdatedMessage = page.locator("//div[contains(text(),'Draft updated successfully')]");
this.draftDetails = page.locator("//div[@class='draft-details']");
this.ballotTab = page.locator("//a[text()='Ballots']");
this.createBallotButton = page.locator("//button[text()='Create Ballot']");
this.createBallotHeader = page.locator("//h1[text()='Create Ballot']");
this.ballotNameTextbox = page.locator("//input[@name='ballotName']");
this.ballotTypeDropdown = page.locator("//select[@name='ballotType']");
this.ballotOpenDate = page.locator("//input[@name='openDate']");
this.ballotCloseDate = page.locator("//input[@name='closeDate']");
this.addBallotItemButton = page.locator("//button[text()='Add Item']");
this.ballotItemTitle = page.locator("//input[@name='itemTitle']");
this.ballotItemDescription = page.locator("//textarea[@name='itemDescription']");
this.ballotItemUpload = page.locator("//input[@type='file' and @name='itemFile']");
this.ballotItemList = page.locator("//ul[@class='ballot-item-list']/li");
this.removeBallotItem = page.locator("//button[text()='Remove']");
this.saveBallotButton = page.locator("//button[text()='Save Ballot']");
this.ballotCreatedMessage = page.locator("//div[contains(text(),'Ballot created successfully')]");
this.ballotList = page.locator("//ul[@class='ballot-list']/li");
this.viewBallot = page.locator("//a[text()='View Ballot']");
this.closeBallotView = page.locator("//button[@aria-label='Close Ballot']");
this.nextPage1 = page.locator("(//span[text()='Next'])[1]");
this.nextPage2 = page.locator("(//span[text()='Next'])[2]");
this.prevPage1 = page.locator("(//span[text()='Previous'])[1]");
this.prevPage2 = page.locator("(//span[text()='Previous'])[2]");
this.comment_discussions = page.locator("//div[@class='comment-discussions']");
this.collaborationAreaNo = page.locator("//div[@class='group-switcher-wrapper']//following-sibling::div[contains(@class,'title')]");
this.collaborationAreaTitle = page.locator("//h1[@class='collaboration-area-title']");
this.addCommentButton = page.locator("//button[text()='Add Comment']");
this.commentTextArea = page.locator("//textarea[@name='comment']");
this.postCommentButton = page.locator("//button[text()='Post Comment']");
this.postedComment = page.locator("//div[@class='comment-text']");
this.editCommentButton = page.locator("//button[text()='Edit Comment']");
this.deleteCommentButton = page.locator("//button[text()='Delete Comment']");
this.confirmDeleteComment = page.locator("//button[text()='Confirm']");
this.commentTimestamp = page.locator("//span[@class='comment-timestamp']");
this.commentAuthor = page.locator("//span[@class='comment-author']");
this.discussionList = page.locator("//ul[@class='discussion-list']/li");
this.openDiscussion = page.locator("//a[text()='Open Discussion']");
this.closeDiscussion = page.locator("//button[@aria-label='Close Discussion']");
this.discussionTitle = page.locator("//h1[@class='discussion-title']");
this.discussionDescription = page.locator("//div[@class='discussion-description']");
this.addDiscussionButton = page.locator("//button[text()='Add Discussion']");
this.discussionTitleInput = page.locator("//input[@name='discussionTitle']");
this.discussionDescriptionInput = page.locator("//textarea[@name='discussionDescription']");
this.saveDiscussionButton = page.locator("//button[text()='Save Discussion']");
this.discussionCreatedMessage = page.locator("//div[contains(text(),'Discussion created successfully')]");
this.replyButton = page.locator("//button[text()='Reply']");
this.replyTextArea = page.locator("//textarea[@name='reply']");
this.postReplyButton = page.locator("//button[text()='Post Reply']");
this.replyList = page.locator("//ul[@class='reply-list']/li");
this.editReplyButton = page.locator("//button[text()='Edit Reply']");
this.deleteReplyButton = page.locator("//button[text()='Delete Reply']");
this.confirmDeleteReply = page.locator("//button[text()='Confirm']");


}
}
